/*! *****************************************************************************
  mmm-rnv
  Version 1.0.0

  

  (c) Julian Dinter
  Licence: ISC

  This file is auto-generated. Do not edit.
***************************************************************************** */

!function(){"use strict";Module.register("MMM-RNV",{defaults:{header:"RNV Abfahrtsmonitor",animationSpeed:2e3,updateInterval:6e4,stationID:"2417",numJourneys:10,apiKey:"",clientID:"",resourceID:"",clientSecret:"",oAuthURL:"",tenantID:"",clientAPIURL:"https://graphql-sandbox-dds.rnv-online.de",icon:{STRASSENBAHN:"fas fa-train",STADTBUS:"fas fa-bus"}},start(){Log.info("Starting module: "+this.name),this.hasLoaded=!1,this.credentials=!1,this.fetchedData=null,(this.config.apiKey||this.config.clientID&&this.config.clientSecret&&this.config.tenantID&&this.config.resourceID)&&(this.credentials=!0,this.config.oAuthURL="https://login.microsoftonline.com/"+this.config.tenantID+"/oauth2/token",this.sendSocketNotification("SET_CONFIG",this.config))},getStyles:()=>["MMM-RNV.css","font-awesome.css"],getScripts:()=>[],getTranslations:()=>({de:"translations/de.json"}),getHeader(){return this.config.header},getDom(){const e=document.createElement("div");if(!this.credentials)return e.innerHTML="There are no <i>RNV Credentials</i> in config file set.",e.className="light small dimmed",e;if(""==this.config.stationID)return e.innerHTML="No <i>stationID</i> in config file set.",e.className="light small dimmed",e;if(!this.hasLoaded)return e.innerHTML="Loading...",e.className="light small dimmed",e;if(this.hasLoaded&&0==this.fetchedData.length)return e.innerHTML="No data available",e.className="light small dimmed",e;const t=document.createElement("table");t.className="MMM-RNV light small",t.id="RNVTable";const n=document.createElement("tr"),a=document.createElement("th");a.innerHTML=this.translate("DEPARTURE"),a.className="MMM-RNV header departure";const i=document.createElement("th");i.innerHTML=this.translate("LINE"),i.className="MMM-RNV line",i.colSpan=2;const s=document.createElement("th");s.innerHTML=this.translate("DIRECTION"),s.className="MMM-RNV direction";const l=document.createElement("th");l.innerHTML=this.translate("PLATFORM"),l.className="MMM-RNV platform",n.appendChild(a),n.appendChild(i),n.appendChild(s),n.appendChild(l),t.appendChild(n);const d=document.createElement("tr"),c=document.createElement("td");c.colSpan=5,c.innerHTML="<hr>",d.appendChild(c),t.appendChild(d);const o=this.fetchedData.length;for(let e=0;e<o;e++){let n=this.fetchedData[e],a=n.line.id.split("-")[1],i=n.type,s=n.stops[0].destinationLabel,l=n.stops[0].pole.platform.label,d=n.stops[0].delay,c=n.stops[0].plannedDeparture.isoString,o=new Date(c).toLocaleTimeString("de-DE",{hour:"2-digit",minute:"2-digit",hour12:!1}),r=document.createElement("td");r.className="MMM-RNV data time",r.innerHTML=o;let h=document.createElement("span");h.className="MMM-RNV small delay",d>0?(h.innerHTML="+ "+d,h.classList.add("late")):d<0?(h.innerHTML="- "+d,h.classList.add("early")):(h.innerHTML="+ "+d,h.style.visibility="hidden"),r.appendChild(h);let m=document.createElement("td");m.className="MMM-RNV data line",m.innerHTML=a;let p=document.createElement("span");p.className="MMM-RNV data time icon";let M=document.createElement("i");M.className=this.config.icon[i],p.appendChild(M);let u=document.createElement("td");u.className="MMM-RNV data direction",u.innerHTML=s;let f=document.createElement("td");f.className="MMM-RNV data platform",f.innerHTML=l;let N=document.createElement("tr");N.appendChild(r),N.appendChild(m),N.appendChild(p),N.appendChild(u),N.appendChild(f),t.appendChild(N)}return e.appendChild(t),e},socketNotificationReceived(e,t){if("DATA"==e){let e=this.config.animationSpeed;this.hasLoaded&&(e=0),this.fetchedData=t,this.hasLoaded=!0,this.updateDom(e)}}})}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
