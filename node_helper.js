/*! *****************************************************************************
  mmm-rnv
  Version 1.0.2

  This is a departure monitor for the Rhein-Neckar-Verkehr (RNV) public transport network for the MagicMirrorÂ² platform. 
  Please submit bugs at https://github.com/jalibu/MMM-RNV/issues

  (c) Julian Dinter,Jan Litzenburger
  Licence: MIT

  This file is auto-generated. Do not edit.
***************************************************************************** */

"use strict";var e=require("node_helper"),t=require("apollo-client"),n=require("apollo-cache-inmemory"),i=require("apollo-link-http"),o=require("apollo-link-context"),r=require("graphql-tag"),s=require("node-fetch");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function l(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var c=l(e),u=a(r),d=a(s);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function h(e,t,n,i){return new(n||(n=Promise))((function(o,r){function s(e){try{l(i.next(e))}catch(e){r(e)}}function a(e){try{l(i.throw(e))}catch(e){r(e)}}function l(e){var t;e.done?o(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}l((i=i.apply(e,t||[])).next())}))}module.exports=c.create({start(){this.config=null,this.client=null,this.schedule=null,this.colorCodes=[],this.failedRequests=0,this.getColorCodes()},getColorCodes(){return h(this,void 0,void 0,(function*(){try{const e=yield d.default("https://rnvopendataportalpublic.blob.core.windows.net/public/openDataPortal/liniengruppen-farben.json"),t=yield e.json();this.colorCodes=t.lineGroups}catch(e){console.warn("Could not request color codes",e)}}))},socketNotificationReceived(e,t){return h(this,void 0,void 0,(function*(){"RNV_CONFIG_REQUEST"==e&&(this.config=t,this.getData(),this.schedule||(this.schedule=setInterval(this.getData.bind(this),this.config.updateIntervalMs)))}))},getData(){return h(this,void 0,void 0,(function*(){try{if(!this.client)try{this.client=yield this.createClient()}catch(e){return console.error(`Error generating the client: ${e.message}`),void this.sendSocketNotification("RNV_ERROR_RESPONSE",{type:"WARNING",message:"Error with API authentication."})}const e=`query {\n            station(id:"${this.config.stationId}") {\n                hafasID\n                longName\n                journeys(startTime: "${(new Date).toISOString()}" first: 50) {\n                    totalCount\n                    elements {\n                        ... on Journey {\n                            line {\n                                id\n                            }\n                            type\n                            stops(onlyHafasID: "${this.config.stationId}") {\n                                pole {\n                                    platform {\n                                        type\n                                        label\n                                        barrierFreeType\n                                    }\n                                }\n                                destinationLabel\n                                plannedArrival {\n                                    isoString\n                                }\n                                realtimeArrival {\n                                    isoString\n                                }\n                                plannedDeparture {\n                                    isoString\n                                }\n                                realtimeDeparture {\n                                    isoString\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }`,t=[],n=(yield this.client.query({query:u.default(e)})).data.station.journeys.elements.filter((e=>null!==e.stops[0].plannedDeparture.isoString));n.sort(((e,t)=>{let n=e.stops[0].plannedDeparture.isoString,i=t.stops[0].plannedDeparture.isoString;return n<i?-1:n>i?1:0}));for(const e of n){const n=new Date(e.stops[0].plannedDeparture.isoString);let i=0;try{const t=new Date(e.stops[0].realtimeDeparture.isoString),o=Math.abs(n.getMilliseconds()-t.getMilliseconds());i=Math.floor(o/60*1e3)}catch(e){console.warn(`Error calculating the delay: ${e.message}`)}const o=e.line.id.split("-")[1];if(this.config.excludeLines.includes(o))continue;const r={line:o,destination:e.stops[0].destinationLabel,departure:n.getTime(),delayInMin:i,platform:e.stops[0].pole.platform.label,type:e.type,highlighted:this.config.highlightLines.includes(o),color:this.colorCodes.find((e=>e.id===o))};if(t.push(r),t.length===this.config.maxResults)break}this.failedRequests=0,this.sendSocketNotification("RNV_DATA_RESPONSE",t)}catch(e){console.warn(`Error fetching the data from the API: ${e.message}`),this.failedRequests++,this.failedRequests>5&&(this.client=null,console.log("Reset the RNV API client"),this.sendSocketNotification("RNV_ERROR_RESPONSE",{type:"WARNING",message:"Error fetching data."}))}}))},createClient(){return h(this,void 0,void 0,(function*(){const{clientId:e,clientSecret:r,resourceId:s,tenantId:a}=this.config.credentials,l=yield d.default(`https://login.microsoftonline.com/${a}/oauth2/token`,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:`grant_type=client_credentials&client_id=${e}&client_secret=${r}&resource=${s}`});if(!l.ok)throw Error(`Could not fetch the access token (${l.status} ${l.statusText})`);const{access_token:c}=yield l.json();console.log("Created new RNV API access token");const u=i.createHttpLink({uri:this.config.clientApiUrl,fetch:d.default}),f=o.setContext(((e,{headers:t})=>h(this,void 0,void 0,(function*(){return{headers:Object.assign(Object.assign({},t),{authorization:c?`Bearer ${c}`:null})}}))));return new t.ApolloClient({link:f.concat(u),cache:new n.InMemoryCache})}))}});
