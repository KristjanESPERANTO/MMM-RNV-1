/*! *****************************************************************************
  mmm-rnv
  Version 1.0.0

  

  (c) Julian Dinter
  Licence: ISC

  This file is auto-generated. Do not edit.
***************************************************************************** */

"use strict";var e=require("node_helper"),t=require("apollo-client"),n=require("apollo-cache-inmemory"),i=require("apollo-link-http"),r=require("apollo-link-context"),o=require("graphql-tag"),s=require("node-fetch");function a(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}function c(e){if(e&&e.__esModule)return e;var t=Object.create(null);return e&&Object.keys(e).forEach((function(n){if("default"!==n){var i=Object.getOwnPropertyDescriptor(e,n);Object.defineProperty(t,n,i.get?i:{enumerable:!0,get:function(){return e[n]}})}})),t.default=e,Object.freeze(t)}var l=c(e),u=a(o),h=a(s);
/*! *****************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */
function f(e,t,n,i){return new(n||(n=Promise))((function(r,o){function s(e){try{c(i.next(e))}catch(e){o(e)}}function a(e){try{c(i.throw(e))}catch(e){o(e)}}function c(e){var t;e.done?r(e.value):(t=e.value,t instanceof n?t:new n((function(e){e(t)}))).then(s,a)}c((i=i.apply(e,t||[])).next())}))}module.exports=l.create({start(){this.config=null,this.client=null,this.previousFetchOk=!1},socketNotificationReceived(e,t){return f(this,void 0,void 0,(function*(){if("SET_CONFIG"==e){const e=t;e.apiKey||(e.apiKey=yield this.createToken(e.oAuthURL,e.clientID,e.clientSecret,e.resourceID)),this.config=e,this.client=this.createClient()}this.getData()}))},getData(){return f(this,void 0,void 0,(function*(){const e=(new Date).toISOString(),t=this.config.numJourneys,n=this.config.stationID,i=`query {\n            station(id:"${n}") {\n                hafasID\n                longName\n                journeys(startTime: "${e}" first: ${t}) {\n                    totalCount\n                    elements {\n                        ... on Journey {\n                            line {\n                                id\n                            }\n                            type\n                            stops(onlyHafasID: "${n}") {\n                                pole {\n                                    platform {\n                                        type\n                                        label\n                                        barrierFreeType\n                                    }\n                                }\n                                destinationLabel\n                                plannedArrival {\n                                    isoString\n                                }\n                                realtimeArrival {\n                                    isoString\n                                }\n                                plannedDeparture {\n                                    isoString\n                                }\n                                realtimeDeparture {\n                                    isoString\n                                }\n                            }\n                        }\n                    }\n                }\n            }\n        }`;try{const e=(yield this.client.query({query:u.default(i)})).data.station.journeys.elements.filter((e=>null==e.stops[0].plannedDeparture.isoString));e.sort(((e,t)=>{let n=e.stops[0].plannedDeparture.isoString,i=t.stops[0].plannedDeparture.isoString;return n<i?-1:n>i?1:0}));for(const t of e){if(t.stops[0].delay=0,null===t.stops[0].realtimeDeparture.isoString)continue;const e=t.stops[0],n=new Date(e.plannedDeparture.isoString),i=new Date(e.realtimeDeparture.isoString),r=Math.abs(n.getMilliseconds()-i.getMilliseconds());let o=Math.floor(r/60*1e3);t.stops[0].delay=o}this.previousFetchOk=!0,this.sendSocketNotification("DATA",e)}catch(e){const t=this.config.clientID,n=this.config.clientSecret,i=this.config.resourceID,r=this.config.oAuthURL,o=this.previousFetchOk;if(t&&n&&r&&i&&o)this.previousFetchOk=!1,this.createToken(r,t,n,i).then((e=>{this.config.apiKey=e,this.client=this.authenticate(this.config.apiKey),this.getData()}));else{const e=1;this.sendSocketNotification("ERROR",e)}}setTimeout(this.getData.bind(this),this.config.updateInterval)}))},createToken(e,t,n,i){return f(this,void 0,void 0,(function*(){const r=yield h.default(e,{method:"POST",headers:{"Content-Type":"application/x-www-form-urlencoded"},body:"grant_type=client_credentials&client_id="+t+"&client_secret="+n+"&resource="+i});if(!r.ok)return console.error("Error while creating access token.",r.error),null;return(yield r.json()).access_token}))},createClient(){const e=this.config.apiKey,o=new i.HttpLink({uri:this.config.clientAPIURL,credentials:"same-origin",fetch:h.default}),s=r.setContext(((t,{headers:n})=>f(this,void 0,void 0,(function*(){return{headers:Object.assign(Object.assign({},n),{authorization:e?`Bearer ${e}`:null})}}))));return new t.ApolloClient({link:s.concat(o),cache:new n.InMemoryCache})}});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
